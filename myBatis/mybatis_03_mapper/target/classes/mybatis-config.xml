<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!--注意下面的标签编写都是得有顺序的.-->
	<!--
		1. mybatis可以使用properties来引入外部properties配置文件的内容:
			resource: 引入类路径下的资源
			url: 引入网络路径或这磁盘路径的资源
	-->
	<properties resource="dbconfig.properties"/>

	 <!--
	 	2. settings包含很多重要的设置项
	 		setting:用来设置每个设置项
	 			name: 设置名
	 			value: 取值
	 -->
	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>

	<!--
		3. typeAliases:别名处理器:可以为我们的Java类型起别名
			注意别名不区分大小写
			1. typeAlias: 为某个Java类型起别名
				type: 指定起别名的全类名,默认别名是类名小写,employee
				alias: 指定新的别名
	-->
	<typeAliases>
		<!--<typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/>-->
		<!-- 2. package: 为某个包下的所有类批量起别名(可能存在别名冲突)
				name: 指定包名(为当前包以及下面的所有的后代包的每一个类都起一个默认别名,(默认小写)

			 3. 批量起别名的情况下,使用@Alias注解为某个类型起别名
		-->
		<package name="com.atguigu.mybatis.bean"/>
	</typeAliases>

	<!--4. environments:环境,mybatis可以配置多种环境信息,default指定某种环境,可以快速切换
			environment: 配置一个具体环境信息,必须有以下两个标签,id 代表当前环境的唯一标识
				transactionManager:事务管理器
						Configuration(org.apache.ibatis.session.Configuration)里面定义的别名而已
					type :管理器类型 [JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)]
						自定义事务管理器类型:实现TransactionFactory接口就行,type指定就行.

				dataSource: 数据源
					type: 数据源类型;[UNPOOLED|POOLED|JNDI]
					自定义数据源:实现DataSourceFactory接口,type是全类名.
	-->




	<environments default="dev_mysql">
		<environment id="dev_mysql">
			<transactionManager type="JDBC"/>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>

		<environment id="dev_oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>
	</environments>

	<!--这个顺序不能乱.-->
	<!-- 5、databaseIdProvider：支持多数据库厂商的；
		 type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	  -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>

	<!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
	<!-- 6、mappers：将sql映射注册到全局配置中 -->
	<mappers>
		<!--
			mapper:注册一个sql映射
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml

				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
		 <!--<mapper resource="EmployeeMapper.xml"/>-->
		 <!--<mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/>-->
		<!--<mapper class="com.atguigu.mybatis.dao.EmployeeMapper"/>-->

		<!-- 批量注册： -->
		<package name="com.atguigu.mybatis.dao"/>
	</mappers>

</configuration>